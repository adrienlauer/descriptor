package model

//*****************************************************************************
//
//     _         _           ____                           _           _
//    / \  _   _| |_ ___    / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |
//   / _ \| | | | __/ _ \  | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |
//  / ___ \ |_| | || (_) | | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| |
// /_/   \_\__,_|\__\___/   \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// Implementation(s) of TDependencies
// ----------------------------------------------------

//TDependenciesOnDependenciesHolder is the struct containing the Dependencies in order to implement TDependencies
type TDependenciesOnDependenciesHolder struct {
	h Dependencies
}

//CreateTDependenciesForDependencies returns an holder of Dependencies implementing TDependencies
func CreateTDependenciesForDependencies(o Dependencies) TDependenciesOnDependenciesHolder {
	return TDependenciesOnDependenciesHolder{
		h: o,
	}
}

//HasDependencies returns true if there is dependencies
func (r TDependenciesOnDependenciesHolder) HasDependencies() bool {
	return len(r.h.Content) > 0
}

//Dependencies returns the references of stacks we depend on
func (r TDependenciesOnDependenciesHolder) Dependencies() []TStackRef {
	result := make([]TStackRef, 0, 0)
	for _, val := range r.h.Content {
		result = append(result, CreateTStackRefForStackRef(val))
	}
	return result

}
